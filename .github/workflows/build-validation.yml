name: Build Validation & Monitoring

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run build validation every 4 hours
    - cron: '0 */4 * * *'

jobs:
  build-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run Build Validation
      run: |
        echo "üîß Starting comprehensive build validation..."
        node scripts/build-validation.js build

    - name: Generate Build Report
      if: always()
      run: |
        echo "üìä Generating build validation report..."
        node scripts/build-validation.js report > build-report.md

    - name: Upload Build Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: build-report-${{ matrix.node-version }}
        path: build-report.md

    - name: Run Build Trend Analysis
      if: always()
      run: |
        echo "üìà Running build trend analysis..."
        node scripts/build-validation.js trends

    - name: Check Build Performance
      run: |
        echo "‚ö° Checking build performance..."
        START_TIME=$(date +%s%N)
        pnpm build
        END_TIME=$(date +%s%N)
        BUILD_TIME=$((($END_TIME - $START_TIME) / 1000000))
        echo "Build completed in ${BUILD_TIME}ms"

        # Fail if build takes longer than 5 minutes
        if [ $BUILD_TIME -gt 300000 ]; then
          echo "‚ùå Build time exceeded 5 minutes threshold"
          exit 1
        fi

    - name: Test Build Artifacts
      run: |
        echo "üîç Validating build artifacts..."

        # Check if critical build outputs exist
        MISSING_ARTIFACTS=""

        if [ ! -d "packages/@wundr/core/dist" ]; then
          MISSING_ARTIFACTS="$MISSING_ARTIFACTS core/dist"
        fi

        if [ ! -d "packages/@wundr/security/dist" ]; then
          MISSING_ARTIFACTS="$MISSING_ARTIFACTS security/dist"
        fi

        if [ ! -d "tools/web-client/.next" ]; then
          MISSING_ARTIFACTS="$MISSING_ARTIFACTS web-client/.next"
        fi

        if [ ! -z "$MISSING_ARTIFACTS" ]; then
          echo "‚ùå Missing build artifacts: $MISSING_ARTIFACTS"
          exit 1
        fi

        echo "‚úÖ All expected build artifacts are present"

    - name: Regression Detection
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        echo "üîç Running regression detection..."

        # Compare current build with previous builds
        # This would integrate with historical build data
        node scripts/build-validation.js trends | tee trends.json

        # Extract success rate and alert if below threshold
        SUCCESS_RATE=$(node -e "
          const data = require('./trends.json');
          console.log(data.successRate || 100);
        " 2>/dev/null || echo "100")

        if [ $SUCCESS_RATE -lt 90 ]; then
          echo "‚ö†Ô∏è WARNING: Build success rate dropped to ${SUCCESS_RATE}%"
          echo "Consider investigating recent changes"
        fi

  build-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run Continuous Monitoring Check
      run: |
        echo "üîÑ Running scheduled build monitoring..."
        node scripts/build-validation.js validate

    - name: Generate Monitoring Report
      if: always()
      run: |
        echo "üìä Generating monitoring report..."
        node scripts/build-validation.js report > monitoring-report.md
        cat monitoring-report.md

    - name: Alert on Build Issues
      if: failure()
      run: |
        echo "üö® ALERT: Scheduled build monitoring detected issues!"
        echo "This indicates potential build instability."
        echo "Review recent changes and build logs."

  notify-status:
    runs-on: ubuntu-latest
    needs: [build-validation]
    if: always()
    steps:
    - name: Build Status Summary
      run: |
        if [ "${{ needs.build-validation.result }}" == "success" ]; then
          echo "‚úÖ Build validation passed successfully"
        else
          echo "‚ùå Build validation failed"
          echo "Check the build validation job for details"
        fi