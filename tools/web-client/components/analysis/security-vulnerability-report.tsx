"use client"

import { useState, useEffect, useCallback } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { 
  AlertTriangle, 
  Shield, 
  ExternalLink, 
  Download, 
  Search,
  CheckCircle2,
  XCircle,
  AlertCircle,
  Lock,
  Info,
  Calendar,
  Hash
} from "lucide-react"

import { 
  exportToCSV,
  exportToJSON
} from '@/lib/utils'
import type { SecurityVulnerability, DependencyData } from '@/app/api/analysis/dependencies/route'
import type { PackageInfo, EnrichedPackageInfo } from '@/types/analysis'

interface SecurityVulnerabilityReportProps {
  vulnerabilities?: SecurityVulnerability[]
  dependencies?: DependencyData[]
}

interface SecuritySummary {
  total: number
  critical: number
  high: number
  moderate: number
  low: number
  packagesAffected: number
  patchableVulns: number
}

interface AuditResult {
  packageName: string
  currentVersion: string
  vulnerabilities: SecurityVulnerability[]
  fixAvailable: boolean
  recommendedAction: string
  riskScore: number
}

export function SecurityVulnerabilityReport({ 
  vulnerabilities: initialVulnerabilities = [], 
  dependencies: initialDependencies = [] 
}: SecurityVulnerabilityReportProps) {
  const [vulnerabilities, setVulnerabilities] = useState<SecurityVulnerability[]>(initialVulnerabilities)
  const [dependencies, setDependencies] = useState<DependencyData[]>(initialDependencies)
  const [summary, setSummary] = useState<SecuritySummary>({
    total: 0,
    critical: 0,
    high: 0,
    moderate: 0,
    low: 0,
    packagesAffected: 0,
    patchableVulns: 0
  })
  const [auditResults, setAuditResults] = useState<AuditResult[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [severityFilter, setSeverityFilter] = useState("all")
  const [statusFilter, setStatusFilter] = useState("all")
  const [sortBy, setSortBy] = useState("severity")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isRunningAudit, setIsRunningAudit] = useState(false)

  // Helper functions declared first
  const getHighestSeverity = (vulns: SecurityVulnerability[]): string => {
    const severityOrder = { critical: 4, high: 3, moderate: 2, low: 1 }
    return vulns.reduce((highest, vuln) =>
      severityOrder[vuln.severity] > severityOrder[highest as keyof typeof severityOrder]
        ? vuln.severity
        : highest
    , 'low')
  }

  const calculateRiskScore = (vulns: SecurityVulnerability[], dep: DependencyData): number => {
    let score = 0

    vulns.forEach(vuln => {
      switch (vuln.severity) {
        case 'critical': score += 10; break
        case 'high': score += 7; break
        case 'moderate': score += 4; break
        case 'low': score += 1; break
      }
    })

    // Add multipliers based on package characteristics
    if (!dep.latestVersion) score *= 1.5 // No update info available
    // Note: downloadHistory not available in DependencyData interface

    return Math.round(score * 10) / 10
  }

  const getRecommendedAction = useCallback((vulns: SecurityVulnerability[], dep: DependencyData): string => {
    const highestSeverity = getHighestSeverity(vulns)
    const hasPatches = vulns.some(v => v.patchedVersions !== "None")

    if (highestSeverity === 'critical') {
      return hasPatches ? 'Update immediately' : 'Replace package or apply hotfix'
    }
    if (highestSeverity === 'high') {
      return hasPatches ? 'Update within 24 hours' : 'Review alternatives'
    }
    if (highestSeverity === 'moderate') {
      return hasPatches ? 'Update within one week' : 'Monitor for patches'
    }
    return 'Update when convenient'
  }, [])

  const calculateSecuritySummary = useCallback(() => {
    const severityCounts = {
      critical: vulnerabilities.filter(v => v.severity === 'critical').length,
      high: vulnerabilities.filter(v => v.severity === 'high').length,
      moderate: vulnerabilities.filter(v => v.severity === 'moderate').length,
      low: vulnerabilities.filter(v => v.severity === 'low').length
    }

    const packagesAffected = new Set(vulnerabilities.map(v => v.packageName)).size
    const patchableVulns = vulnerabilities.filter(v => v.patchedVersions !== "None").length

    setSummary({
      total: vulnerabilities.length,
      ...severityCounts,
      packagesAffected,
      patchableVulns
    })
  }, [vulnerabilities])

  const generateAuditResults = useCallback(() => {
    const results: AuditResult[] = []

    // Group vulnerabilities by package
    const vulnsByPackage = vulnerabilities.reduce((acc, vuln) => {
      if (!acc[vuln.packageName]) acc[vuln.packageName] = []
      acc[vuln.packageName].push(vuln)
      return acc
    }, {} as Record<string, SecurityVulnerability[]>)

    Object.entries(vulnsByPackage).forEach(([packageName, vulns]) => {
      const dependency = dependencies.find(d => d.name === packageName)
      if (!dependency) return

      const highestSeverity = getHighestSeverity(vulns)
      const riskScore = calculateRiskScore(vulns, dependency)
      const fixAvailable = vulns.some(v => v.patchedVersions !== "None")

      results.push({
        packageName,
        currentVersion: dependency.version,
        vulnerabilities: vulns,
        fixAvailable,
        recommendedAction: getRecommendedAction(vulns, dependency),
        riskScore
      })
    })

    // Sort by risk score (highest first)
    results.sort((a, b) => b.riskScore - a.riskScore)
    setAuditResults(results)
  }, [vulnerabilities, dependencies, getRecommendedAction])

  useEffect(() => {
    if (vulnerabilities.length === 0 && dependencies.length === 0) {
      loadSecurityData()
    } else {
      calculateSecuritySummary()
      generateAuditResults()
    }
  }, [vulnerabilities.length, dependencies.length, calculateSecuritySummary, generateAuditResults])

  useEffect(() => {
    calculateSecuritySummary()
    generateAuditResults()
  }, [vulnerabilities, dependencies, calculateSecuritySummary, generateAuditResults])

  const loadSecurityData = async () => {
    setLoading(true)
    setError(null)
    
    try {
      // Mock data - in production this would parse package.json files
      const packages: PackageInfo[] = []
      const enrichedPackages: EnrichedPackageInfo[] = []
      
      // Run npm audit
      const auditVulns: SecurityVulnerability[] = []
      
      // Map vulnerabilities to packages
      const dependenciesWithVulns: DependencyData[] = enrichedPackages.map(pkg => ({
        ...pkg,
        vulnerabilities: auditVulns.filter(v => v.packageName === pkg.name).length
      }))
      
      setDependencies(dependenciesWithVulns)
      setVulnerabilities(auditVulns)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load security data')
    } finally {
      setLoading(false)
    }
  }

  const runManualAudit = async () => {
    setIsRunningAudit(true)
    setError(null)
    
    try {
      const auditVulns: SecurityVulnerability[] = []
      setVulnerabilities(auditVulns)
      
      // Update dependency vulnerability counts
      const updatedDeps = dependencies.map(dep => ({
        ...dep,
        vulnerabilities: auditVulns.filter(v => v.packageName === dep.name).length
      }))
      setDependencies(updatedDeps)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to run audit')
    } finally {
      setIsRunningAudit(false)
    }
  }

  const handleExportReport = () => {
    const exportData = {
      summary,
      vulnerabilities: vulnerabilities.map(v => ({
        ...v,
        publishedDate: new Date(v.publishedAt).toLocaleDateString()
      })),
      auditResults,
      generatedAt: new Date().toISOString()
    }
    
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-')
    exportToJSON(exportData, {
      filename: `security-report-${timestamp}.json`,
      pretty: true,
      autoDownload: true
    })
  }


  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500 text-white'
      case 'high': return 'bg-orange-500 text-white'
      case 'moderate': return 'bg-yellow-500 text-black'
      case 'low': return 'bg-blue-500 text-white'
      default: return 'bg-gray-500 text-white'
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <XCircle className="h-4 w-4" />
      case 'high': return <AlertTriangle className="h-4 w-4" />
      case 'moderate': return <AlertCircle className="h-4 w-4" />
      case 'low': return <Info className="h-4 w-4" />
      default: return <Shield className="h-4 w-4" />
    }
  }

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.packageName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.description.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesSeverity = severityFilter === "all" || vuln.severity === severityFilter
    const matchesStatus = statusFilter === "all" || 
                         (statusFilter === "patchable" && vuln.patchedVersions !== "None") ||
                         (statusFilter === "unpatchable" && vuln.patchedVersions === "None")
    
    return matchesSearch && matchesSeverity && matchesStatus
  })

  const sortedVulnerabilities = [...filteredVulnerabilities].sort((a, b) => {
    switch (sortBy) {
      case 'severity':
        const severityOrder = { critical: 4, high: 3, moderate: 2, low: 1 }
        return severityOrder[b.severity] - severityOrder[a.severity]
      case 'cvss':
        return b.cvss - a.cvss
      case 'package':
        return a.packageName.localeCompare(b.packageName)
      case 'published':
        return new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime()
      default:
        return 0
    }
  })

  if (loading) {
    return (
      <div className="space-y-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mr-2" />
              Loading security analysis...
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (error) {
    return (
      <div className="space-y-6">
        <Card>
          <CardContent className="p-6">
            <div className="text-center text-red-600">
              <p className="text-lg font-semibold mb-2">Error Loading Security Data</p>
              <p className="text-sm mb-4">{error}</p>
              <div className="flex gap-2 justify-center">
                <Button onClick={loadSecurityData}>
                  Retry Loading
                </Button>
                <Button variant="outline" onClick={runManualAudit}>
                  Run Manual Audit
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle>Security Vulnerability Report</CardTitle>
              <CardDescription>
                Comprehensive security analysis of known vulnerabilities in project dependencies
              </CardDescription>
            </div>
            <div className="flex gap-2">
              <Button 
                variant="outline" 
                size="sm"
                onClick={handleExportReport}
              >
                <Download className="h-4 w-4 mr-2" />
                Export Report
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={runManualAudit}
                disabled={isRunningAudit}
              >
                {isRunningAudit ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2" />
                ) : (
                  <Shield className="h-4 w-4 mr-2" />
                )}
                {isRunningAudit ? 'Running...' : 'Run Audit'}
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Security Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{summary.total}</div>
            <p className="text-xs text-muted-foreground">
              {summary.packagesAffected} packages affected
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Critical & High</CardTitle>
            <XCircle className="h-4 w-4 text-red-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {summary.critical + summary.high}
            </div>
            <p className="text-xs text-muted-foreground">
              {summary.critical} critical, {summary.high} high
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Patchable</CardTitle>
            <CheckCircle2 className="h-4 w-4 text-green-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {summary.patchableVulns}
            </div>
            <p className="text-xs text-muted-foreground">
              {Math.round((summary.patchableVulns / summary.total) * 100)}% have fixes
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Risk Score</CardTitle>
            <Lock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {auditResults.reduce((sum, result) => sum + result.riskScore, 0).toFixed(1)}
            </div>
            <p className="text-xs text-muted-foreground">
              Cumulative risk assessment
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="vulnerabilities" className="space-y-4">
        <TabsList>
          <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
          <TabsTrigger value="audit">Package Audit</TabsTrigger>
          <TabsTrigger value="remediation">Remediation Guide</TabsTrigger>
        </TabsList>

        <TabsContent value="vulnerabilities" className="space-y-4">
          {/* Search and Filter Controls */}
          <Card>
            <CardHeader>
              <CardTitle>Filter Vulnerabilities</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-4">
                <div className="flex-1 min-w-64">
                  <Input
                    placeholder="Search vulnerabilities..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full"
                  />
                </div>
                <Select value={severityFilter} onValueChange={setSeverityFilter}>
                  <SelectTrigger className="w-48">
                    <SelectValue placeholder="Filter by severity" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Severities</SelectItem>
                    <SelectItem value="critical">Critical</SelectItem>
                    <SelectItem value="high">High</SelectItem>
                    <SelectItem value="moderate">Moderate</SelectItem>
                    <SelectItem value="low">Low</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={statusFilter} onValueChange={setStatusFilter}>
                  <SelectTrigger className="w-48">
                    <SelectValue placeholder="Filter by status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Status</SelectItem>
                    <SelectItem value="patchable">Patchable</SelectItem>
                    <SelectItem value="unpatchable">No Fix Available</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={sortBy} onValueChange={setSortBy}>
                  <SelectTrigger className="w-48">
                    <SelectValue placeholder="Sort by" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="severity">Severity</SelectItem>
                    <SelectItem value="cvss">CVSS Score</SelectItem>
                    <SelectItem value="package">Package Name</SelectItem>
                    <SelectItem value="published">Published Date</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Vulnerabilities List */}
          <Card>
            <CardHeader>
              <CardTitle>Security Vulnerabilities ({sortedVulnerabilities.length})</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {sortedVulnerabilities.map((vuln, index) => (
                  <div key={index} className="border rounded-lg p-4 hover:bg-accent/50 transition-colors">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          {getSeverityIcon(vuln.severity)}
                          <h3 className="font-semibold">{vuln.title}</h3>
                          <Badge className={getSeverityColor(vuln.severity)}>
                            {vuln.severity}
                          </Badge>
                          <Badge variant="outline">
                            CVSS {vuln.cvss}
                          </Badge>
                        </div>
                        <p className="text-sm text-muted-foreground mb-2">
                          Package: <span className="font-medium">{vuln.packageName}</span>
                        </p>
                        <p className="text-sm mb-3">{vuln.description}</p>
                      </div>
                      <Button variant="outline" size="sm" asChild>
                        <a 
                          href={`https://github.com/advisories/${vuln.id}`} 
                          target="_blank" 
                          rel="noopener noreferrer"
                        >
                          <ExternalLink className="h-4 w-4" />
                        </a>
                      </Button>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                      <div>
                        <div className="text-muted-foreground">Vulnerable Versions</div>
                        <div className="font-medium">{vuln.vulnerableVersions}</div>
                      </div>
                      <div>
                        <div className="text-muted-foreground">Patched Versions</div>
                        <div className="font-medium">
                          {vuln.patchedVersions === "None" ? (
                            <span className="text-red-600">No fix available</span>
                          ) : (
                            <span className="text-green-600">{vuln.patchedVersions}</span>
                          )}
                        </div>
                      </div>
                      <div>
                        <div className="text-muted-foreground">CWE</div>
                        <div className="font-medium">{vuln.cwe.join(', ')}</div>
                      </div>
                      <div>
                        <div className="text-muted-foreground">Published</div>
                        <div className="font-medium">
                          {new Date(vuln.publishedAt).toLocaleDateString()}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="audit" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Package Security Audit</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {auditResults.map((result, index) => (
                  <div key={index} className="border rounded-lg p-4 hover:bg-accent/50 transition-colors">
                    <div className="flex items-start justify-between mb-3">
                      <div>
                        <h3 className="font-semibold text-lg">{result.packageName}</h3>
                        <p className="text-sm text-muted-foreground">
                          Current version: {result.currentVersion}
                        </p>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold">
                          Risk: {result.riskScore}
                        </div>
                        {result.fixAvailable ? (
                          <Badge className="bg-green-500 text-white">
                            <CheckCircle2 className="h-3 w-3 mr-1" />
                            Fix Available
                          </Badge>
                        ) : (
                          <Badge variant="destructive">
                            <XCircle className="h-3 w-3 mr-1" />
                            No Fix
                          </Badge>
                        )}
                      </div>
                    </div>

                    <div className="mb-3">
                      <div className="text-sm font-medium mb-1">Vulnerabilities:</div>
                      <div className="flex flex-wrap gap-2">
                        {result.vulnerabilities.map((vuln, vIndex) => (
                          <Badge key={vIndex} className={getSeverityColor(vuln.severity)}>
                            {vuln.severity}: {vuln.title.substring(0, 30)}...
                          </Badge>
                        ))}
                      </div>
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="text-sm">
                        <span className="font-medium">Recommended Action:</span> {result.recommendedAction}
                      </div>
                      <Button variant="outline" size="sm">
                        View Details
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="remediation" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Remediation Guide</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Immediate Actions */}
                <div>
                  <h3 className="font-semibold text-lg mb-4">Immediate Actions Required</h3>
                  <div className="space-y-3">
                    {auditResults
                      .filter(result => result.recommendedAction === "Update immediately")
                      .map((result, index) => (
                        <div key={index} className="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 p-4">
                          <div className="flex items-center gap-2 mb-2">
                            <XCircle className="h-5 w-5 text-red-500" />
                            <span className="font-medium">{result.packageName}</span>
                          </div>
                          <p className="text-sm mb-2">
                            Critical vulnerabilities found. Update immediately to secure version.
                          </p>
                          <div className="bg-gray-100 dark:bg-gray-800 rounded p-2 font-mono text-sm">
                            npm install {result.packageName}@latest
                          </div>
                        </div>
                      ))
                    }
                  </div>
                </div>

                {/* Recommended Updates */}
                <div>
                  <h3 className="font-semibold text-lg mb-4">Recommended Updates</h3>
                  <div className="space-y-3">
                    {auditResults
                      .filter(result => result.recommendedAction === "Update when possible")
                      .map((result, index) => (
                        <div key={index} className="bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-500 p-4">
                          <div className="flex items-center gap-2 mb-2">
                            <AlertTriangle className="h-5 w-5 text-yellow-500" />
                            <span className="font-medium">{result.packageName}</span>
                          </div>
                          <p className="text-sm mb-2">
                            Security patches available. Schedule update in next maintenance window.
                          </p>
                          <div className="bg-gray-100 dark:bg-gray-800 rounded p-2 font-mono text-sm">
                            npm install {result.packageName}@latest
                          </div>
                        </div>
                      ))
                    }
                  </div>
                </div>

                {/* Monitor for Updates */}
                <div>
                  <h3 className="font-semibold text-lg mb-4">Monitor for Updates</h3>
                  <div className="space-y-3">
                    {auditResults
                      .filter(result => result.recommendedAction === "Monitor for patches")
                      .map((result, index) => (
                        <div key={index} className="bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 p-4">
                          <div className="flex items-center gap-2 mb-2">
                            <Info className="h-5 w-5 text-blue-500" />
                            <span className="font-medium">{result.packageName}</span>
                          </div>
                          <p className="text-sm">
                            No patches currently available. Monitor security advisories and update when fixes are released.
                          </p>
                        </div>
                      ))
                    }
                  </div>
                </div>

                {/* Automated Commands */}
                <div>
                  <h3 className="font-semibold text-lg mb-4">Automated Fix Commands</h3>
                  <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-4 font-mono text-sm space-y-1">
                    <div># Run npm audit to identify vulnerabilities</div>
                    <div className="text-blue-600">npm audit</div>
                    <div className="mt-3"># Automatically fix vulnerabilities where possible</div>
                    <div className="text-blue-600">npm audit fix</div>
                    <div className="mt-3"># Force fix breaking changes (use with caution)</div>
                    <div className="text-blue-600">npm audit fix --force</div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}