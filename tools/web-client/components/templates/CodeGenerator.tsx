'use client';

import { useState } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import {
  Code2,
  Download,
  Copy,
  CheckCircle,
  FileText,
  Folder,
  Zap,
  Play,
  Settings,
  GitBranch,
} from 'lucide-react';

import {
  ServiceTemplate,
  TemplateCustomizations,
  UserInfo,
} from '@/types/templates';

interface CodeGeneratorProps {
  template: ServiceTemplate;
  customizations: TemplateCustomizations;
  onGenerate: (code: string) => void;
}

interface GeneratedFile {
  path: string;
  name: string;
  type: 'file' | 'folder';
  content: string;
  size: string;
  language: string;
}

export function CodeGenerator({
  template,
  customizations,
  onGenerate,
}: CodeGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [generatedFiles, setGeneratedFiles] = useState<GeneratedFile[]>([]);
  const [selectedFile, setSelectedFile] = useState<GeneratedFile | null>(null);
  const [copied, setCopied] = useState(false);

  const generateCode = async () => {
    setIsGenerating(true);
    setProgress(0);

    // Simulate code generation with progress
    const steps = [
      'Analyzing template structure...',
      'Applying customizations...',
      'Generating project files...',
      'Creating configuration files...',
      'Setting up dependencies...',
      'Finalizing code structure...',
    ];

    for (let i = 0; i < steps.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 500));
      setProgress(((i + 1) / steps.length) * 100);
    }

    // Mock generated files based on template and customizations
    const files: GeneratedFile[] = [
      {
        path: '/',
        name: 'package.json',
        type: 'file',
        language: 'json',
        size: '1.2 KB',
        content: JSON.stringify(
          {
            name:
              customizations.packageName ||
              template.name.toLowerCase().replace(/\s+/g, '-'),
            version: customizations.version || '1.0.0',
            description: customizations.description || template.description,
            author: customizations.author || 'Generated by Wundr',
            scripts: {
              start: 'node dist/index.js',
              dev: 'ts-node-dev src/index.ts',
              build: 'tsc',
              test: 'jest',
            },
            dependencies: generateDependencies(),
            devDependencies: generateDevDependencies(),
          },
          null,
          2
        ),
      },
      {
        path: '/src',
        name: 'index.ts',
        type: 'file',
        language: 'typescript',
        size: '3.4 KB',
        content: generateMainFile(),
      },
      {
        path: '/src/routes',
        name: 'api.ts',
        type: 'file',
        language: 'typescript',
        size: '2.1 KB',
        content: generateApiRoutes(),
      },
      {
        path: '/src/middleware',
        name: 'auth.ts',
        type: 'file',
        language: 'typescript',
        size: '1.8 KB',
        content: generateAuthMiddleware(),
      },
      {
        path: '/src/models',
        name: 'User.ts',
        type: 'file',
        language: 'typescript',
        size: '1.5 KB',
        content: generateUserModel(),
      },
      {
        path: '/src/config',
        name: 'database.ts',
        type: 'file',
        language: 'typescript',
        size: '0.9 KB',
        content: generateDatabaseConfig(),
      },
      {
        path: '/',
        name: 'Dockerfile',
        type: 'file',
        language: 'dockerfile',
        size: '0.6 KB',
        content: generateDockerfile(),
      },
      {
        path: '/',
        name: 'docker-compose.yml',
        type: 'file',
        language: 'yaml',
        size: '0.8 KB',
        content: generateDockerCompose(),
      },
      {
        path: '/tests',
        name: 'api.test.ts',
        type: 'file',
        language: 'typescript',
        size: '2.3 KB',
        content: generateTests(),
      },
      {
        path: '/',
        name: 'README.md',
        type: 'file',
        language: 'markdown',
        size: '1.7 KB',
        content: generateReadme(),
      },
    ];

    setGeneratedFiles(files);
    setSelectedFile(files[1]); // Select index.ts by default
    setIsGenerating(false);

    // Call parent callback with generated code
    onGenerate(files[1].content);
  };

  const generateDependencies = () => {
    const deps: Record<string, string> = {
      express: '^4.18.2',
      cors: '^2.8.5',
      helmet: '^7.1.0',
    };

    if (customizations.features?.authentication) {
      deps.jsonwebtoken = '^9.0.2';
      deps.bcryptjs = '^2.4.3';
    }

    if (customizations.features?.database) {
      if (customizations.database?.type === 'mongodb') {
        deps.mongoose = '^8.0.3';
      } else if (customizations.database?.type === 'postgresql') {
        deps.pg = '^8.11.3';
        deps['@types/pg'] = '^8.10.9';
      }
    }

    if (customizations.features?.validation) {
      deps.joi = '^17.11.0';
    }

    if (customizations.features?.logging) {
      deps.winston = '^3.11.0';
    }

    return deps;
  };

  const generateDevDependencies = () => {
    return {
      '@types/node': '^20.10.0',
      '@types/express': '^4.17.21',
      '@types/cors': '^2.8.17',
      typescript: '^5.3.0',
      'ts-node-dev': '^2.0.0',
      jest: '^29.7.0',
      '@types/jest': '^29.5.8',
      'ts-jest': '^29.1.1',
    };
  };

  const generateMainFile = () => {
    return `import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
${customizations.features?.database ? "import { connectDatabase } from './config/database';" : ''}
${customizations.features?.authentication ? "import { authenticateToken } from './middleware/auth';" : ''}
import apiRoutes from './routes/api';

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

${customizations.features?.authentication ? "app.use('/api', authenticateToken);" : ''}
app.use('${customizations.api?.prefix || '/api'}', apiRoutes);

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    service: '${customizations.projectName || template.name}'
  });
});

async function startServer() {
  try {
    ${customizations.features?.database ? 'await connectDatabase();' : ''}
    
    app.listen(PORT, () => {
      console.log(\`ðŸš€ Server running on port \${PORT}\`);
      console.log(\`ðŸ“š API documentation: http://localhost:\${PORT}/api/docs\`);
    });
  } catch (_error) {
    // Error logged - details available in network tab;
    process.exit(1);
  }
}

startServer();

export default app;`;
  };

  const generateApiRoutes = () => {
    return `import { Router, Request, Response } from 'express';
${customizations.features?.validation ? "import Joi from 'joi';" : ''}

const router = Router();

// Get all items
router.get('/items', async (req: Request, res: Response) => {
  try {
    // Implementation here
    res.json({ message: 'Get all items', data: [] });
  } catch (_error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Create new item
router.post('/items', async (req: Request, res: Response) => {
  try {
    ${
      customizations.features?.validation
        ? `
    // Validation schema
    const schema = Joi.object({
      name: Joi.string().required(),
      description: Joi.string().optional()
    });
    
    const { error, value } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({ error: error.details[0].message });
    }`
        : ''
    }
    
    // Implementation here
    res.status(201).json({ message: 'Item created', data: req.body });
  } catch (_error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get item by ID
router.get('/items/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    // Implementation here
    res.json({ message: \`Get item \${id}\`, data: {} });
  } catch (_error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Update item
router.put('/items/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    // Implementation here
    res.json({ message: \`Updated item \${id}\`, data: req.body });
  } catch (_error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Delete item
router.delete('/items/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    // Implementation here
    res.json({ message: \`Deleted item \${id}\` });
  } catch (_error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;`;
  };

  const generateAuthMiddleware = () => {
    if (!customizations.features?.authentication) return '';

    return `import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';

interface AuthRequest extends Request {
  user?: UserInfo;
}

export const authenticateToken = (req: AuthRequest, res: Response, next: NextFunction) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Access token required' });
  }

  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'Invalid token' });
    }
    
    req.user = user;
    next();
  });
};

export const generateAccessToken = (user: UserInfo) => {
  return jwt.sign(user, process.env.JWT_SECRET || 'fallback-secret', { 
    expiresIn: '${customizations.authentication?.tokenExpiry || '7d'}' 
  });
};`;
  };

  const generateUserModel = () => {
    if (!customizations.features?.database) return '';

    if (customizations.database?.type === 'mongodb') {
      return `import mongoose, { Document, Schema } from 'mongoose';

export interface IUser extends Document {
  name: string;
  email: string;
  password: string;
  createdAt: Date;
  updatedAt: Date;
}

const UserSchema: Schema = new Schema({
  name: {
    type: String,
    required: true,
    trim: true
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  }
}, {
  timestamps: true
});

export const User = mongoose.model<IUser>('User', UserSchema);`;
    }

    return '// User model configuration';
  };

  const generateDatabaseConfig = () => {
    if (!customizations.features?.database) return '';

    if (customizations.database?.type === 'mongodb') {
      return `import mongoose from 'mongoose';

export const connectDatabase = async () => {
  try {
    const connectionString = process.env.MONGODB_URI || 
      'mongodb://${customizations.database?.host || 'localhost'}:${customizations.database?.port || '27017'}/${customizations.database?.name || 'myapp'}';
    
    await mongoose.connect(connectionString);
    console.log('âœ… Connected to MongoDB');
  } catch (_error) {
    // Error logged - details available in network tab;
    throw error;
  }
};`;
    }

    return '// Database configuration';
  };

  const generateDockerfile = () => {
    if (!customizations.features?.docker) return '';

    return `FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

RUN npm run build

EXPOSE 3000

USER node

CMD ["npm", "start"]`;
  };

  const generateDockerCompose = () => {
    return `version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
    ${
      customizations.features?.database &&
      customizations.database?.type === 'mongodb'
        ? `depends_on:
      - mongodb

  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=${customizations.database?.name || 'myapp'}
    volumes:
      - mongodb_data:/data/db

volumes:
  mongodb_data:`
        : ''
    }`;
  };

  const generateTests = () => {
    return `import request from 'supertest';
import app from '../src/index';

describe('API Endpoints', () => {
  describe('GET /health', () => {
    it('should return health status', async () => {
      const response = await request(app)
        .get('/health')
        .expect(200);
      
      expect(response.body).toHaveProperty('status', 'healthy');
      expect(response.body).toHaveProperty('timestamp');
    });
  });

  describe('GET /api/items', () => {
    it('should return all items', async () => {
      const response = await request(app)
        .get('/api/items')
        .expect(200);
      
      expect(response.body).toHaveProperty('data');
      expect(Array.isArray(response.body.data)).toBe(true);
    });
  });

  describe('POST /api/items', () => {
    it('should create a new item', async () => {
      const newItem = {
        name: 'Test Item',
        description: 'Test Description'
      };

      const response = await request(app)
        .post('/api/items')
        .send(newItem)
        .expect(201);
      
      expect(response.body).toHaveProperty('message', 'Item created');
    });
  });
});`;
  };

  const generateReadme = () => {
    return `# ${customizations.projectName || template.name}

${customizations.description || template.description}

## Features

${Object.entries(customizations.features || {})
  .filter(([_, enabled]) => enabled)
  .map(
    ([feature, _]) => `- ${feature.charAt(0).toUpperCase() + feature.slice(1)}`
  )
  .join('\n')}

## Getting Started

### Prerequisites

- Node.js 18+
- ${customizations.database?.type || 'Database'} (if using database features)

### Installation

\`\`\`bash
# Clone the repository
git clone <repository-url>
cd ${customizations.projectName || 'project'}

# Install dependencies
npm install

# Set up environment variables
cp .env.example .env

# Start development server
npm run dev
\`\`\`

### Environment Variables

\`\`\`env
NODE_ENV=development
PORT=3000
${
  customizations.features?.database
    ? `
# Database
DATABASE_URL=your_database_url
`
    : ''
}${
      customizations.features?.authentication
        ? `
# Authentication
JWT_SECRET=your_jwt_secret
`
        : ''
    }
\`\`\`

## API Documentation

### Health Check

\`GET /health\` - Returns service health status

### API Endpoints

\`GET /api/items\` - Get all items
\`POST /api/items\` - Create new item
\`GET /api/items/:id\` - Get item by ID
\`PUT /api/items/:id\` - Update item
\`DELETE /api/items/:id\` - Delete item

## Scripts

- \`npm run dev\` - Start development server
- \`npm run build\` - Build for production
- \`npm start\` - Start production server
- \`npm test\` - Run tests

## Docker

\`\`\`bash
# Build and run with Docker Compose
docker-compose up --build
\`\`\`

## License

MIT`;
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const getFileIcon = (language: string) => {
    switch (language) {
      case 'typescript':
        return <Code2 className='h-4 w-4 text-blue-500' />;
      case 'json':
        return <FileText className='h-4 w-4 text-yellow-500' />;
      case 'dockerfile':
        return <Settings className='h-4 w-4 text-blue-600' />;
      case 'yaml':
        return <Settings className='h-4 w-4 text-green-500' />;
      case 'markdown':
        return <FileText className='h-4 w-4 text-gray-500' />;
      default:
        return <FileText className='h-4 w-4 text-gray-400' />;
    }
  };

  return (
    <div className='space-y-6'>
      {!generatedFiles.length ? (
        <Card>
          <CardHeader>
            <CardTitle className='flex items-center'>
              <Zap className='h-5 w-5 mr-2' />
              Generate Code
            </CardTitle>
            <CardDescription>
              Generate production-ready code based on your template and
              customizations
            </CardDescription>
          </CardHeader>
          <CardContent className='space-y-4'>
            {isGenerating ? (
              <div className='space-y-4'>
                <div className='flex items-center space-x-2'>
                  <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-primary'></div>
                  <span className='text-sm'>Generating your service...</span>
                </div>
                <Progress value={progress} className='w-full' />
              </div>
            ) : (
              <div className='space-y-4'>
                <div className='grid grid-cols-2 gap-4 text-sm'>
                  <div>
                    <span className='font-medium'>Template:</span>{' '}
                    {template.name}
                  </div>
                  <div>
                    <span className='font-medium'>Language:</span>{' '}
                    {template.language}
                  </div>
                  <div>
                    <span className='font-medium'>Framework:</span>{' '}
                    {template.framework}
                  </div>
                  <div>
                    <span className='font-medium'>Features:</span>{' '}
                    {
                      Object.values(customizations.features || {}).filter(
                        Boolean
                      ).length
                    }
                  </div>
                </div>
                <Button onClick={generateCode} className='w-full'>
                  <Play className='h-4 w-4 mr-2' />
                  Generate Code
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      ) : (
        <div className='grid grid-cols-1 lg:grid-cols-3 gap-6'>
          {/* File Tree */}
          <Card className='lg:col-span-1'>
            <CardHeader>
              <CardTitle className='flex items-center'>
                <Folder className='h-5 w-5 mr-2' />
                Generated Files
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ScrollArea className='h-[400px]'>
                <div className='space-y-1'>
                  {generatedFiles.map((file, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedFile(file)}
                      className={`w-full flex items-center justify-between p-2 rounded text-left hover:bg-muted ${
                        selectedFile === file ? 'bg-muted' : ''
                      }`}
                    >
                      <div className='flex items-center space-x-2'>
                        {getFileIcon(file.language)}
                        <span className='text-sm font-mono'>{file.name}</span>
                      </div>
                      <span className='text-xs text-muted-foreground'>
                        {file.size}
                      </span>
                    </button>
                  ))}
                </div>
              </ScrollArea>
            </CardContent>
          </Card>

          {/* Code Preview */}
          <Card className='lg:col-span-2'>
            <CardHeader>
              <div className='flex items-center justify-between'>
                <CardTitle className='flex items-center'>
                  <Code2 className='h-5 w-5 mr-2' />
                  {selectedFile?.name || 'Select a file'}
                </CardTitle>
                {selectedFile && (
                  <div className='flex items-center space-x-2'>
                    <Badge variant='outline'>{selectedFile.language}</Badge>
                    <Button
                      size='sm'
                      variant='outline'
                      onClick={() => copyToClipboard(selectedFile.content)}
                    >
                      {copied ? (
                        <CheckCircle className='h-4 w-4 mr-2' />
                      ) : (
                        <Copy className='h-4 w-4 mr-2' />
                      )}
                      {copied ? 'Copied!' : 'Copy'}
                    </Button>
                  </div>
                )}
              </div>
            </CardHeader>
            <CardContent>
              {selectedFile ? (
                <ScrollArea className='h-[400px]'>
                  <pre className='bg-muted p-4 rounded-md text-sm font-mono overflow-x-auto'>
                    <code>{selectedFile.content}</code>
                  </pre>
                </ScrollArea>
              ) : (
                <div className='flex items-center justify-center h-[400px] bg-muted rounded-md'>
                  <div className='text-center text-muted-foreground'>
                    <FileText className='h-12 w-12 mx-auto mb-4' />
                    <p>Select a file to view its contents</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {generatedFiles.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className='flex items-center'>
              <Download className='h-5 w-5 mr-2' />
              Download Options
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className='flex items-center space-x-2'>
              <Button>
                <Download className='h-4 w-4 mr-2' />
                Download ZIP
              </Button>
              <Button variant='outline'>
                <GitBranch className='h-4 w-4 mr-2' />
                Create Repository
              </Button>
              <Button variant='outline'>
                <Play className='h-4 w-4 mr-2' />
                Deploy Now
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
